[{"name":"app.R","content":"# Required libraries\r\nlibrary(plotly)\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\nlibrary(leaflet)\r\nlibrary(DT)\r\nlibrary(dplyr)       # For data manipulation functions like summarize\r\nlibrary(scales)      # For dollar_format and other formatting functions\r\nlibrary(lubridate)   # For floor_date and other date functions\r\nlibrary(ggplot2)     # For ggplot visualizations\r\nlibrary(shinylive)\r\n\r\n# UI Definition\r\nui <- dashboardPage(\r\n    skin = \"purple\",\r\n    dashboardHeader(title = \"Customer Analytics\", titleWidth = 500),\r\n    \r\n    # Sidebar with navigation menu\r\n    dashboardSidebar(\r\n        sidebarMenu(\r\n            menuItem(\"Overview\", tabName = \"overview\", icon = icon(\"dashboard\")),\r\n            menuItem(\"Customer Activity\", tabName = \"activity\", icon = icon(\"user-clock\")),\r\n            menuItem(\"Purchase Behavior\", tabName = \"purchases\", icon = icon(\"shopping-cart\")),\r\n            menuItem(\"Demographics\", tabName = \"demographics\", icon = icon(\"users\")),\r\n            menuItem(\"Product Analysis\", tabName = \"products\", icon = icon(\"box\")),\r\n            menuItem(\"Raw Data\", tabName = \"data\", icon = icon(\"table\"))\r\n        )\r\n    ),\r\n    \r\n    # Dashboard body with all panels\r\n    dashboardBody(\r\n        tags$head(\r\n            tags$style(HTML(\"\r\n        .box {border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);}\r\n        .small-box {border-radius: 5px;}\r\n        .content-wrapper {background-color: #f9f9f9;}\r\n      \"))\r\n        ),\r\n        \r\n        tabItems(\r\n            # Overview Tab\r\n            tabItem(tabName = \"overview\",\r\n                    fluidRow(\r\n                        valueBoxOutput(\"total_sales_box\", width = 3),\r\n                        valueBoxOutput(\"conversion_rate_box\", width = 3),\r\n                        valueBoxOutput(\"aov_box\", width = 3),\r\n                        valueBoxOutput(\"active_customers_box\", width = 3)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Sales Trend\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"sales_trend\", height = 300), width = 8),\r\n                        box(title = \"Sales by Channel\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"sales_by_channel\", height = 300), width = 4)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Top Products\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"top_products\", height = 300), width = 6),\r\n                        box(title = \"Customer Segments\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"customer_segments\", height = 300), width = 6)\r\n                    )\r\n            ),\r\n            \r\n            # Customer Activity Tab\r\n            tabItem(tabName = \"activity\",\r\n                    fluidRow(\r\n                        box(title = \"Site Traffic\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"site_traffic\", height = 250), width = 8),\r\n                        box(title = \"Engagement Metrics\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"engagement_metrics\", height = 250), width = 4)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"User Journey\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"user_journey\", height = 300), width = 6),\r\n                        box(title = \"Abandoned Cart Analysis\", status = \"warning\", solidHeader = TRUE,\r\n                            plotlyOutput(\"abandoned_cart\", height = 300), width = 6)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Time on Page by Category\", status = \"success\", solidHeader = TRUE,\r\n                            plotlyOutput(\"time_on_page\", height = 250), width = 12)\r\n                    )\r\n            ),\r\n            \r\n            # Purchase Behavior Tab\r\n            tabItem(tabName = \"purchases\",\r\n                    fluidRow(\r\n                        box(title = \"Purchase Frequency\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"purchase_frequency\", height = 300), width = 6),\r\n                        box(title = \"Average Order Value Over Time\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"aov_time\", height = 300), width = 6)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Customer Repurchase Rate\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"repurchase_rate\", height = 250), width = 4),\r\n                        box(title = \"Popular Product Combinations\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"product_combinations\", height = 250), width = 4),\r\n                        box(title = \"Purchase Time Heatmap\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"purchase_heatmap\", height = 250), width = 4)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Customer Lifetime Value Distribution\", status = \"success\", solidHeader = TRUE,\r\n                            plotlyOutput(\"clv_distribution\", height = 250), width = 12)\r\n                    )\r\n            ),\r\n            \r\n            # Demographics Tab\r\n            tabItem(tabName = \"demographics\",\r\n                    fluidRow(\r\n                        box(title = \"Age Distribution\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"age_distribution\", height = 300), width = 6),\r\n                        box(title = \"Gender Breakdown\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"gender_breakdown\", height = 300), width = 6)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Geographic Distribution\", status = \"info\", solidHeader = TRUE,\r\n                            leafletOutput(\"geo_map\", height = 400), width = 8),\r\n                        box(title = \"Device Usage\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"device_usage\", height = 400), width = 4)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Customer Segmentation\", status = \"success\", solidHeader = TRUE,\r\n                            plotlyOutput(\"customer_segmentation\", height = 300), width = 12)\r\n                    )\r\n            ),\r\n            \r\n            # Product Analysis Tab\r\n            tabItem(tabName = \"products\",\r\n                    fluidRow(\r\n                        box(title = \"Product Category Performance\", status = \"primary\", solidHeader = TRUE,\r\n                            plotlyOutput(\"category_performance\", height = 300), width = 12)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Product View to Purchase Ratio\", status = \"info\", solidHeader = TRUE,\r\n                            plotlyOutput(\"view_purchase_ratio\", height = 300), width = 6),\r\n                        box(title = \"Product Return Rates\", status = \"warning\", solidHeader = TRUE,\r\n                            plotlyOutput(\"return_rates\", height = 300), width = 6)\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Seasonal Product Trends\", status = \"success\", solidHeader = TRUE,\r\n                            plotlyOutput(\"seasonal_trends\", height = 300), width = 12)\r\n                    )\r\n            ),\r\n            \r\n            # Raw Data Tab\r\n            tabItem(tabName = \"data\",\r\n                    fluidRow(\r\n                        box(title = \"Filter Data\", status = \"primary\", solidHeader = TRUE, width = 12,\r\n                            column(4, dateRangeInput(\"date_range\", \"Date Range\", \r\n                                                     start = Sys.Date() - 365, end = Sys.Date())),\r\n                            column(4, selectInput(\"data_category\", \"Data Category\", \r\n                                                  choices = c(\"Transactions\", \"Customer Profiles\", \"Product Views\", \"Cart Activity\"))),\r\n                            column(4, downloadButton(\"download_data\", \"Download Selected Data\"))\r\n                        )\r\n                    ),\r\n                    fluidRow(\r\n                        box(title = \"Raw Data\", status = \"primary\", solidHeader = TRUE, width = 12,\r\n                            DTOutput(\"raw_data_table\"))\r\n                    )\r\n            )\r\n        )\r\n    )\r\n)\r\n\r\n# Server logic\r\nserver <- function(input, output){\r\n    \r\n    # Sample data generation (in a real application, you would connect to your database)\r\n    set.seed(123)\r\n    \r\n    # Generate sample data - in a real scenario, you'd connect to your database\r\n    sales_data <- data.frame(\r\n        date = seq.Date(from = Sys.Date() - 365, to = Sys.Date(), by = \"day\"),\r\n        sales = runif(366, 1000, 5000) + \r\n            sin(seq(0, 2*pi, length.out = 366)) * 2000 + \r\n            rep(c(0, 500, 1000, 1500, 2000), each = 73.2),\r\n        transactions = round(runif(366, 50, 200) + \r\n                                 sin(seq(0, 2*pi, length.out = 366)) * 100),\r\n        visitors = round(runif(366, 500, 2000) + \r\n                             sin(seq(0, 2*pi, length.out = 366)) * 500),\r\n        new_customers = round(runif(366, 20, 100))\r\n    )\r\n    \r\n    # Add monthly pattern\r\n    monthly_effect <- rep(c(1, 1.1, 0.9, 1.2, 1.3, 0.8, 1, 1.1, 1.4, 1.5, 2, 2.5), each = 30.5)\r\n    sales_data$sales <- sales_data$sales * monthly_effect[1:366]\r\n    \r\n    # Add channel data\r\n    channels <- c(\"Direct\", \"Organic Search\", \"Paid Search\", \"Social Media\", \"Email\", \"Referral\")\r\n    channel_data <- data.frame(\r\n        channel = channels,\r\n        sales = c(350000, 280000, 220000, 190000, 150000, 110000)\r\n    )\r\n    \r\n    # Product data\r\n    product_categories <- c(\"Electronics\", \"Clothing\", \"Home & Kitchen\", \"Books\", \"Beauty\", \"Sports\", \"Toys\")\r\n    product_data <- data.frame(\r\n        category = product_categories,\r\n        sales = c(420000, 380000, 290000, 180000, 210000, 150000, 120000),\r\n        views = c(1200000, 950000, 720000, 650000, 480000, 420000, 380000),\r\n        conversion_rate = c(8.2, 12.5, 10.3, 7.8, 11.2, 8.7, 9.1),\r\n        return_rate = c(4.2, 8.7, 5.3, 1.8, 3.2, 4.7, 2.1)\r\n    )\r\n    \r\n    # Customer segments\r\n    customer_segments <- data.frame(\r\n        segment = c(\"New\", \"Occasional\", \"Regular\", \"Loyal\", \"VIP\"),\r\n        count = c(12000, 8500, 6200, 3800, 1500)\r\n    )\r\n    \r\n    # Demographic data\r\n    age_groups <- c(\"18-24\", \"25-34\", \"35-44\", \"45-54\", \"55-64\", \"65+\")\r\n    age_data <- data.frame(\r\n        age_group = age_groups,\r\n        count = c(4500, 8200, 7800, 5600, 3900, 2000)\r\n    )\r\n    \r\n    gender_data <- data.frame(\r\n        gender = c(\"Male\", \"Female\", \"Other\"),\r\n        count = c(15000, 16500, 500)\r\n    )\r\n    \r\n    # Device data\r\n    device_data <- data.frame(\r\n        device = c(\"Desktop\", \"Mobile\", \"Tablet\"),\r\n        count = c(12000, 18000, 2000)\r\n    )\r\n    \r\n    # Output definitions\r\n    \r\n    # Overview tab outputs\r\n    output$total_sales_box <- renderValueBox({\r\n        valueBox(\r\n            paste0(\"$\", format(sum(sales_data$sales), big.mark = \",\", scientific = FALSE)),\r\n            \"Total Sales\", icon = icon(\"dollar-sign\"), color = \"green\"\r\n        )\r\n    })\r\n    \r\n    output$conversion_rate_box <- renderValueBox({\r\n        conv_rate <- sum(sales_data$transactions) / sum(sales_data$visitors) * 100\r\n        valueBox(\r\n            paste0(round(conv_rate, 1), \"%\"),\r\n            \"Conversion Rate\", icon = icon(\"percentage\"), color = \"yellow\"\r\n        )\r\n    })\r\n    \r\n    output$aov_box <- renderValueBox({\r\n        aov <- sum(sales_data$sales) / sum(sales_data$transactions)\r\n        valueBox(\r\n            paste0(\"$\", round(aov, 2)),\r\n            \"Average Order Value\", icon = icon(\"shopping-bag\"), color = \"blue\"\r\n        )\r\n    })\r\n    \r\n    output$active_customers_box <- renderValueBox({\r\n        valueBox(\r\n            format(sum(sales_data$new_customers) + 15000, big.mark = \",\"),\r\n            \"Active Customers\", icon = icon(\"users\"), color = \"purple\"\r\n        )\r\n    })\r\n    \r\n    output$sales_trend <- renderPlotly({\r\n        # Make sure to use consistent spelling\r\n        monthly_sales <- sales_data %>%\r\n            mutate(month = floor_date(date, \"month\")) %>%\r\n            group_by(month) %>%\r\n            summarize(sales = sum(sales))  # Changed from summarise to summarize if that's what's used in your environment\r\n        \r\n        p <- ggplot(monthly_sales, aes(x = month, y = sales)) +\r\n            geom_line(color = \"#3c8dbc\", size = 1.2) +\r\n            geom_point(color = \"#3c8dbc\", size = 3) +\r\n            scale_y_continuous(labels = scales::dollar_format()) +  # Use explicit scales:: prefix\r\n            labs(x = \"\", y = \"Monthly Sales\") +\r\n            theme_minimal() +\r\n            theme(\r\n                axis.text = element_text(size = 10),\r\n                plot.background = element_rect(fill = \"white\")\r\n            )\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$sales_by_channel <- renderPlotly({\r\n        p <- ggplot(channel_data, aes(x = reorder(channel, sales), y = sales, fill = channel)) +\r\n            geom_bar(stat = \"identity\") +\r\n            scale_y_continuous(labels = scales::dollar_format()) +  # Use explicit scales:: prefix\r\n            coord_flip() +\r\n            labs(x = \"\", y = \"Sales\") +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            scale_fill_brewer(palette = \"Blues\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$top_products <- renderPlotly({\r\n        p <- ggplot(product_data, aes(x = reorder(category, sales), y = sales, fill = sales)) +\r\n            geom_bar(stat = \"identity\") +\r\n            scale_y_continuous(labels = scales::dollar_format()) +  # Use explicit scales:: prefix \r\n            coord_flip() +\r\n            labs(x = \"\", y = \"Sales\") +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            scale_fill_gradient(low = \"#56B4E9\", high = \"#0072B2\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$customer_segments <- renderPlotly({\r\n        # Create a fresh data frame right here\r\n        segments_df <- data.frame(\r\n            segment = c(\"New\", \"Occasional\", \"Regular\", \"Loyal\", \"VIP\"),\r\n            count = c(12000, 8500, 6200, 3800, 1500)\r\n        )\r\n        \r\n        # Create a very simple plot first\r\n        p <- plot_ly(segments_df, labels = ~segment, values = ~count, type = 'pie',\r\n                     textinfo = 'label+percent',\r\n                     insidetextorientation = 'radial')\r\n        \r\n        p <- p %>% layout(title = \"Customer Segments\")\r\n        \r\n        return(p)\r\n    })\r\n    # Customer Activity tab outputs\r\n    output$site_traffic <- renderPlotly({\r\n        p <- ggplot(sales_data, aes(x = date)) +\r\n            geom_line(aes(y = visitors, color = \"Visitors\"), size = 1) +\r\n            geom_line(aes(y = transactions, color = \"Transactions\"), size = 1) +\r\n            scale_color_manual(values = c(\"Visitors\" = \"#3c8dbc\", \"Transactions\" = \"#00a65a\")) +\r\n            labs(x = \"\", y = \"Count\", color = \"\") +\r\n            theme_minimal()\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$engagement_metrics <- renderPlotly({\r\n        metrics <- data.frame(\r\n            metric = c(\"Bounce Rate\", \"Pages/Session\", \"Avg. Session\"),\r\n            value = c(32, 4.5, 3.2),\r\n            max = c(100, 10, 10)\r\n        )\r\n        \r\n        p <- ggplot(metrics, aes(x = metric, y = value, fill = metric)) +\r\n            geom_bar(stat = \"identity\") +\r\n            geom_text(aes(label = ifelse(metric == \"Bounce Rate\", \r\n                                         paste0(value, \"%\"), \r\n                                         ifelse(metric == \"Avg. Session\", \r\n                                                paste0(value, \" min\"), \r\n                                                as.character(value)))), \r\n                      vjust = -0.5) +\r\n            ylim(0, max(metrics$max) * 1.1) +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"\") +\r\n            scale_fill_brewer(palette = \"Set2\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$user_journey <- renderPlotly({\r\n        stages <- data.frame(\r\n            stage = c(\"Home Page\", \"Category Page\", \"Product Page\", \"Add to Cart\", \"Checkout\", \"Purchase\"),\r\n            users = c(10000, 7500, 5000, 2000, 1500, 1200)\r\n        )\r\n        \r\n        p <- plot_ly(stages, x = ~stage, y = ~users, type = \"funnel\",\r\n                     marker = list(color = colorRampPalette(c(\"#3c8dbc\", \"#00a65a\"))(6)))\r\n        \r\n        p\r\n    })\r\n    \r\n    output$abandoned_cart <- renderPlotly({\r\n        cart_data <- data.frame(\r\n            reason = c(\"Price too high\", \"Just browsing\", \"Found better deal\", \r\n                       \"Shipping cost\", \"Payment issues\", \"Other\"),\r\n            percentage = c(28, 22, 18, 15, 10, 7)\r\n        )\r\n        \r\n        p <- ggplot(cart_data, aes(x = reorder(reason, percentage), y = percentage, fill = percentage)) +\r\n            geom_bar(stat = \"identity\") +\r\n            coord_flip() +\r\n            scale_fill_gradient(low = \"#f39c12\", high = \"#dd4b39\") +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"Percentage (%)\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$time_on_page <- renderPlotly({\r\n        time_data <- data.frame(\r\n            category = product_categories,\r\n            avg_time = c(120, 95, 105, 150, 85, 75, 90)\r\n        )\r\n        \r\n        p <- ggplot(time_data, aes(x = category, y = avg_time, fill = category)) +\r\n            geom_bar(stat = \"identity\") +\r\n            geom_text(aes(label = paste0(avg_time, \"s\")), vjust = -0.5) +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"Avg. Time (seconds)\") +\r\n            scale_fill_brewer(palette = \"Set3\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    # Purchase Behavior tab outputs\r\n    output$purchase_frequency <- renderPlotly({\r\n        freq_data <- data.frame(\r\n            frequency = c(\"One-time\", \"2-3 times\", \"4-5 times\", \"6-10 times\", \"11+ times\"),\r\n            customers = c(8500, 6200, 4100, 2500, 800)\r\n        )\r\n        \r\n        p <- ggplot(freq_data, aes(x = frequency, y = customers, fill = frequency)) +\r\n            geom_bar(stat = \"identity\") +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"Purchase Frequency\", y = \"Number of Customers\") +\r\n            scale_fill_brewer(palette = \"Blues\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$aov_time <- renderPlotly({\r\n        aov_time <- sales_data %>%\r\n            mutate(month = floor_date(date, \"month\")) %>%\r\n            group_by(month) %>%\r\n            summarize(\r\n                sales = sum(sales),\r\n                transactions = sum(transactions),\r\n                aov = sales / transactions\r\n            )\r\n        \r\n        p <- ggplot(aov_time, aes(x = month, y = aov)) +\r\n            geom_line(color = \"#00a65a\", size = 1.2) +\r\n            geom_point(color = \"#00a65a\", size = 3) +\r\n            scale_y_continuous(labels = dollar_format()) +\r\n            labs(x = \"\", y = \"Average Order Value\") +\r\n            theme_minimal()\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$repurchase_rate <- renderPlotly({\r\n        p <- plot_ly(\r\n            type = \"indicator\",\r\n            mode = \"gauge+number\",\r\n            value = 45,\r\n            title = list(text = \"Repurchase Rate (%)\"),\r\n            gauge = list(\r\n                axis = list(range = list(0, 100)),\r\n                bar = list(color = \"#00a65a\"),\r\n                steps = list(\r\n                    list(range = c(0, 30), color = \"#f56954\"),\r\n                    list(range = c(30, 70), color = \"#f39c12\"),\r\n                    list(range = c(70, 100), color = \"#00a65a\")\r\n                )\r\n            )\r\n        )\r\n        \r\n        p\r\n    })\r\n    \r\n    output$product_combinations <- renderPlotly({\r\n        combo_data <- data.frame(\r\n            combo = c(\"Electronics + Accessories\", \"Clothing + Shoes\", \"Books + Electronics\", \r\n                      \"Beauty + Clothing\", \"Home + Kitchen\"),\r\n            frequency = c(850, 720, 580, 460, 390)\r\n        )\r\n        \r\n        p <- ggplot(combo_data, aes(x = reorder(combo, frequency), y = frequency, fill = frequency)) +\r\n            geom_bar(stat = \"identity\") +\r\n            coord_flip() +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"Frequency\") +\r\n            scale_fill_gradient(low = \"#3c8dbc\", high = \"#605ca8\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$purchase_heatmap <- renderPlotly({\r\n        # Create purchase time heatmap data\r\n        days <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")\r\n        hours <- 0:23\r\n        \r\n        # Generate some realistic purchase pattern data\r\n        set.seed(123)\r\n        heatmap_data <- expand.grid(day = factor(days, levels = days), hour = hours)\r\n        \r\n        # Business hours have more purchases\r\n        heatmap_data$value <- ifelse(heatmap_data$hour >= 9 & heatmap_data$hour <= 20, \r\n                                     runif(nrow(heatmap_data), 10, 100),\r\n                                     runif(nrow(heatmap_data), 1, 30))\r\n        \r\n        # Weekend patterns are different\r\n        heatmap_data$value <- ifelse(heatmap_data$day %in% c(\"Saturday\", \"Sunday\") & \r\n                                         heatmap_data$hour >= 10 & heatmap_data$hour <= 18,\r\n                                     heatmap_data$value * 1.5,\r\n                                     heatmap_data$value)\r\n        \r\n        # Lunch hour boost\r\n        heatmap_data$value <- ifelse(heatmap_data$hour >= 12 & heatmap_data$hour <= 13,\r\n                                     heatmap_data$value * 1.3,\r\n                                     heatmap_data$value)\r\n        \r\n        # Evening boost on weekdays\r\n        heatmap_data$value <- ifelse(!(heatmap_data$day %in% c(\"Saturday\", \"Sunday\")) & \r\n                                         heatmap_data$hour >= 18 & heatmap_data$hour <= 22,\r\n                                     heatmap_data$value * 1.4,\r\n                                     heatmap_data$value)\r\n        \r\n        p <- plot_ly(\r\n            x = heatmap_data$hour,\r\n            y = heatmap_data$day,\r\n            z = heatmap_data$value,\r\n            type = \"heatmap\",\r\n            colorscale = \"Blues\"\r\n        ) %>%\r\n            layout(\r\n                xaxis = list(title = \"Hour of Day\"),\r\n                yaxis = list(title = \"\")\r\n            )\r\n        \r\n        p\r\n    })\r\n    \r\n    output$clv_distribution <- renderPlotly({\r\n        # Create CLV data\r\n        set.seed(123)\r\n        clv_data <- data.frame(\r\n            customer_id = 1:1000,\r\n            clv = exp(rnorm(1000, 5, 1))  # Lognormal distribution for CLV\r\n        )\r\n        \r\n        p <- ggplot(clv_data, aes(x = clv)) +\r\n            geom_histogram(bins = 50, fill = \"#00a65a\", color = \"white\", alpha = 0.8) +\r\n            scale_x_continuous(labels = dollar_format()) +\r\n            labs(x = \"Customer Lifetime Value\", y = \"Number of Customers\") +\r\n            theme_minimal()\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    # Demographics tab outputs\r\n    output$age_distribution <- renderPlotly({\r\n        p <- ggplot(age_data, aes(x = age_group, y = count, fill = age_group)) +\r\n            geom_bar(stat = \"identity\") +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"Age Group\", y = \"Number of Customers\") +\r\n            scale_fill_brewer(palette = \"Blues\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$gender_breakdown <- renderPlotly({\r\n        p <- plot_ly(gender_data, labels = ~gender, values = ~count, type = 'pie',\r\n                     marker = list(colors = c(\"#3c8dbc\", \"#00a65a\", \"#605ca8\")))\r\n        \r\n        p\r\n    })\r\n    \r\n    output$geo_map <- renderLeaflet({\r\n        # Sample data for geographic distribution\r\n        set.seed(123)\r\n        n <- 500\r\n        geo_data <- data.frame(\r\n            lat = runif(n, 25, 49),  # US latitude range\r\n            lng = runif(n, -125, -70),  # US longitude range\r\n            customers = rpois(n, 50)  # Random customer counts\r\n        )\r\n        \r\n        leaflet(geo_data) %>%\r\n            addTiles() %>%\r\n            addCircleMarkers(\r\n                lng = ~lng,\r\n                lat = ~lat,\r\n                radius = ~sqrt(customers) * 1.5,\r\n                color = \"#3c8dbc\",\r\n                fillOpacity = 0.7,\r\n                popup = ~paste(\"Customers:\", customers)\r\n            )\r\n    })\r\n    \r\n    output$device_usage <- renderPlotly({\r\n        p <- plot_ly(device_data, labels = ~device, values = ~count, type = 'pie',\r\n                     marker = list(colors = c(\"#3c8dbc\", \"#00a65a\", \"#605ca8\")))\r\n        \r\n        p\r\n    })\r\n    \r\n    output$customer_segmentation <- renderPlotly({\r\n        # Create RFM (Recency, Frequency, Monetary) segmentation\r\n        set.seed(123)\r\n        n <- 1000\r\n        rfm_data <- data.frame(\r\n            customer_id = 1:n,\r\n            recency = runif(n, 1, 100),\r\n            frequency = rlnorm(n, 1, 1),\r\n            monetary = rlnorm(n, 4, 1)\r\n        )\r\n        \r\n        p <- plot_ly(rfm_data, x = ~recency, y = ~frequency, z = ~monetary, \r\n                     marker = list(size = 5, opacity = 0.6),\r\n                     type = \"scatter3d\", mode = \"markers\",\r\n                     color = ~monetary, colorscale = \"Blues\")\r\n        \r\n        p\r\n    })\r\n    \r\n    # Product Analysis tab outputs\r\n    output$category_performance <- renderPlotly({\r\n        p <- plot_ly(product_data) %>%\r\n            add_trace(x = ~category, y = ~sales, type = 'bar', name = 'Sales',\r\n                      marker = list(color = '#3c8dbc')) %>%\r\n            add_trace(x = ~category, y = ~views / 10, type = 'bar', name = 'Views (÷10)',\r\n                      marker = list(color = '#00a65a')) %>%\r\n            layout(yaxis = list(title = 'Value'), barmode = 'group')\r\n        \r\n        p\r\n    })\r\n    \r\n    output$view_purchase_ratio <- renderPlotly({\r\n        p <- ggplot(product_data, aes(x = reorder(category, conversion_rate), \r\n                                      y = conversion_rate, fill = conversion_rate)) +\r\n            geom_bar(stat = \"identity\") +\r\n            geom_text(aes(label = paste0(round(conversion_rate, 1), \"%\")), hjust = -0.2) +\r\n            coord_flip() +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"Conversion Rate (%)\") +\r\n            scale_fill_gradient(low = \"#ffffcc\", high = \"#3c8dbc\") +\r\n            ylim(0, max(product_data$conversion_rate) * 1.2)\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$return_rates <- renderPlotly({\r\n        p <- ggplot(product_data, aes(x = reorder(category, -return_rate), \r\n                                      y = return_rate, fill = return_rate)) +\r\n            geom_bar(stat = \"identity\") +\r\n            geom_text(aes(label = paste0(round(return_rate, 1), \"%\")), vjust = -0.5) +\r\n            theme_minimal() +\r\n            theme(legend.position = \"none\") +\r\n            labs(x = \"\", y = \"Return Rate (%)\") +\r\n            scale_fill_gradient(low = \"#00a65a\", high = \"#dd4b39\")\r\n        \r\n        ggplotly(p)\r\n    })\r\n    \r\n    output$seasonal_trends <- renderPlotly({\r\n        # Create seasonal product data\r\n        months <- month.abb\r\n        \r\n        # Wrap the visualization in tryCatch to prevent dashboard crashes\r\n        tryCatch({\r\n            # Create seasonal factors for ALL categories\r\n            seasonal_factors <- list(\r\n                \"Electronics\" = c(0.7, 0.7, 0.8, 0.9, 1.0, 1.1, 0.9, 1.0, 1.2, 1.1, 1.5, 2.1),\r\n                \"Clothing\" = c(0.9, 0.8, 1.1, 1.2, 1.3, 1.2, 0.8, 1.3, 1.4, 1.0, 1.1, 1.9),\r\n                \"Home & Kitchen\" = c(1.0, 0.9, 1.1, 1.3, 1.2, 1.0, 0.9, 1.0, 1.1, 1.2, 1.3, 1.8),\r\n                \"Books\" = c(0.8, 0.9, 1.0, 0.9, 1.1, 1.2, 1.5, 1.2, 1.1, 1.0, 1.1, 2.0),\r\n                \"Beauty\" = c(0.9, 1.0, 1.1, 1.2, 1.3, 1.2, 1.0, 0.9, 1.1, 1.2, 1.3, 1.8),\r\n                \"Sports\" = c(0.8, 0.7, 1.0, 1.2, 1.4, 1.5, 1.3, 1.2, 1.0, 0.9, 0.8, 1.2),\r\n                \"Toys\" = c(0.7, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 1.0, 1.1, 1.2, 1.5, 2.6)\r\n            )\r\n            \r\n            # Check that all product categories have seasonal factors\r\n            missing_categories <- setdiff(product_categories, names(seasonal_factors))\r\n            if (length(missing_categories) > 0) {\r\n                # For any missing categories, create default seasonal patterns\r\n                for (cat in missing_categories) {\r\n                    seasonal_factors[[cat]] <- rep(1, 12) # Default to no seasonality\r\n                }\r\n            }\r\n            \r\n            # Base sales for each category (with error checking)\r\n            base_sales <- setNames(\r\n                product_data$sales / 12, \r\n                product_data$category\r\n            )\r\n            \r\n            # Calculate monthly sales for each category\r\n            monthly_sales <- data.frame()\r\n            for (cat in product_categories) {\r\n                cat_base <- base_sales[cat]\r\n                if (is.na(cat_base)) {\r\n                    # Skip if category not found in base_sales\r\n                    next\r\n                }\r\n                \r\n                cat_seasonal <- data.frame(\r\n                    month = factor(months, levels = months),\r\n                    category = cat,\r\n                    sales = cat_base * seasonal_factors[[cat]]\r\n                )\r\n                monthly_sales <- rbind(monthly_sales, cat_seasonal)\r\n            }\r\n            \r\n            # Create the plotly visualization\r\n            plot_ly(\r\n                data = monthly_sales, \r\n                x = ~month, \r\n                y = ~sales, \r\n                color = ~category, \r\n                type = \"scatter\", \r\n                mode = \"lines+markers\"\r\n            ) %>%\r\n                layout(\r\n                    title = \"Seasonal Product Trends\",\r\n                    xaxis = list(title = \"Month\"),\r\n                    yaxis = list(title = \"Sales\"),\r\n                    legend = list(title = list(text = \"Product Category\"))\r\n                )\r\n            \r\n        }, error = function(e) {\r\n            # Return a meaningful error visualization instead of crashing\r\n            plot_ly() %>%\r\n                add_annotations(\r\n                    text = paste(\"Error in seasonal trends chart:\", e$message),\r\n                    showarrow = FALSE,\r\n                    font = list(color = 'red', size = 14)\r\n                ) %>%\r\n                layout(title = \"Seasonal Product Trends (Error)\")\r\n        })\r\n    })\r\n    # Raw Data tab outputs\r\n    output$raw_data_table <- renderDT({\r\n        # Filter the data based on the user's selections\r\n        filtered_data <- tryCatch({\r\n            # In a real application, you would filter your actual data\r\n            # Here we're just using the sample data for demonstration\r\n            if(input$data_category == \"Transactions\") {\r\n                sales_data %>%\r\n                    filter(date >= input$date_range[1], date <= input$date_range[2])\r\n            } else if(input$data_category == \"Customer Profiles\") {\r\n                # Join some demographic data for demonstration\r\n                data.frame(\r\n                    customer_id = 1:20,\r\n                    age_group = sample(age_groups, 20, replace = TRUE),\r\n                    gender = sample(gender_data$gender, 20, replace = TRUE, prob = gender_data$count/sum(gender_data$count)),\r\n                    segment = sample(customer_segments$segment, 20, replace = TRUE, prob = customer_segments$count/sum(customer_segments$count)),\r\n                    total_purchases = rpois(20, 5),\r\n                    avg_order_value = round(rlnorm(20, 4, 0.5), 2)\r\n                )\r\n            } else if(input$data_category == \"Product Views\") {\r\n                data.frame(\r\n                    product_id = 1:20,\r\n                    category = sample(product_categories, 20, replace = TRUE),\r\n                    views = round(rlnorm(20, 6, 1)),\r\n                    unique_viewers = round(rlnorm(20, 5, 1)),\r\n                    avg_view_time = round(rlnorm(20, 3, 0.5), 2)\r\n                )\r\n            } else { # Cart Activity\r\n                data.frame(\r\n                    cart_id = 1:20,\r\n                    customer_id = sample(1:1000, 20),\r\n                    items = rpois(20, 3),\r\n                    total_value = round(rlnorm(20, 4, 0.7), 2),\r\n                    status = sample(c(\"Completed\", \"Abandoned\", \"In Progress\"), 20, \r\n                                    replace = TRUE, prob = c(0.6, 0.3, 0.1)),\r\n                    created_at = sample(seq(input$date_range[1], input$date_range[2], by=\"day\"), 20, replace = TRUE)\r\n                )\r\n            }\r\n        }, error = function(e) {\r\n            # Return empty data frame if there's an error\r\n            data.frame(Error = paste(\"An error occurred:\", e$message))\r\n        })\r\n        \r\n        datatable(filtered_data, \r\n                  options = list(pageLength = 10,\r\n                                 scrollX = TRUE,\r\n                                 dom = 'Bfrtip',\r\n                                 buttons = c('copy', 'csv', 'excel')),\r\n                  rownames = FALSE,\r\n                  filter = 'top')\r\n    })\r\n    \r\n    # Download handler for the data\r\n    output$download_data <- downloadHandler(\r\n        filename = function() {\r\n            paste(\"ecommerce-data-\", input$data_category, \"-\", Sys.Date(), \".csv\", sep=\"\")\r\n        },\r\n        content = function(file) {\r\n            # Get the same data as displayed in the table\r\n            if(input$data_category == \"Transactions\") {\r\n                data_to_download <- sales_data %>%\r\n                    filter(date >= input$date_range[1], date <= input$date_range[2])\r\n            } else if(input$data_category == \"Customer Profiles\") {\r\n                data_to_download <- data.frame(\r\n                    customer_id = 1:20,\r\n                    age_group = sample(age_groups, 20, replace = TRUE),\r\n                    gender = sample(gender_data$gender, 20, replace = TRUE, prob = gender_data$count/sum(gender_data$count)),\r\n                    segment = sample(customer_segments$segment, 20, replace = TRUE, prob = customer_segments$count/sum(customer_segments$count)),\r\n                    total_purchases = rpois(20, 5),\r\n                    avg_order_value = round(rlnorm(20, 4, 0.5), 2)\r\n                )\r\n            } else if(input$data_category == \"Product Views\") {\r\n                data_to_download <- data.frame(\r\n                    product_id = 1:20,\r\n                    category = sample(product_categories, 20, replace = TRUE),\r\n                    views = round(rlnorm(20, 6, 1)),\r\n                    unique_viewers = round(rlnorm(20, 5, 1)),\r\n                    avg_view_time = round(rlnorm(20, 3, 0.5), 2)\r\n                )\r\n            } else { # Cart Activity\r\n                data_to_download <- data.frame(\r\n                    cart_id = 1:20,\r\n                    customer_id = sample(1:1000, 20),\r\n                    items = rpois(20, 3),\r\n                    total_value = round(rlnorm(20, 4, 0.7), 2),\r\n                    status = sample(c(\"Completed\", \"Abandoned\", \"In Progress\"), 20, \r\n                                    replace = TRUE, prob = c(0.6, 0.3, 0.1)),\r\n                    created_at = sample(seq(input$date_range[1], input$date_range[2], by=\"day\"), 20, replace = TRUE)\r\n                )\r\n            }\r\n            \r\n            write.csv(data_to_download, file, row.names = FALSE)\r\n        }\r\n    )\r\n}  # End of server function\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"Global_Donor_Funding_Ocha.Rproj","content":"Version: 1.0\r\n\r\nRestoreWorkspace: Default\r\nSaveWorkspace: Default\r\nAlwaysSaveHistory: Default\r\n\r\nEnableCodeIndexing: Yes\r\nUseSpacesForTab: Yes\r\nNumSpacesForTab: 2\r\nEncoding: UTF-8\r\n\r\nRnwWeave: Sweave\r\nLaTeX: pdfLaTeX\r\n","type":"text"}]
